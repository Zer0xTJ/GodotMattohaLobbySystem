extends Node

## Emmited on server when a server rpc recived.
## [br][param method_name] RPC method name.
## [br][param payload] payload as godot dictionaty.
## [br][param sender] peer id who send the rpc.
signal server_rpc_recived(method_name: String, payload: Dictionary, sender: int)

## Emmited on client when a client rpc recived.
## [br][param method_name] RPC method name.
## [br][param payload] payload as godot dictionaty.
## [br][param sender] peer id who send the rpc.
signal client_rpc_recived(method_name: String, payload: Dictionary, sender: int)

## Server address.
var address: String = MattohaSystem.Address
## Server Port.
var port: int = MattohaSystem.Port
## Max RPC channels.
var max_channels: int = MattohaSystem.MaxChannels
## Max players that can connect to server.
var max_players: int = MattohaSystem.MaxPlayers
## Max lobbies count.
var max_lobbies_count: int = MattohaSystem.MaxLobbiesCount
## Max players per lobby.
var max_players_per_lobby: int = MattohaSystem.MaxPlayersPerLobby
## When lobby data changed or game started, auto load available lobbies for all online players.
var auto_load_available_lobbies: bool = MattohaSystem.AutoLoadAvailableLobbies

var client: MattohaClient = MattohaSystem.Client
var server: MattohaServer = MattohaSystem.Server

func _ready():
    MattohaSystem.ClientRpcRecieved.connect(_on_client_rpc_recieved)
    MattohaSystem.ServerRpcRecieved.connect(_on_server_rpc_recieved)

func _on_client_rpc_recieved(method_name: String, payload: Dictionary, sender: int):
    emit_signal("client_rpc_recived", method_name, payload, sender)

func _on_server_rpc_recieved(method_name: String, payload: Dictionary, sender: int):
    emit_signal("server_rpc_recived", method_name, payload, sender)

## Get lobby node from a given node.
## [br]
## [param node] node to get lobby node from.
func get_lobby_node_for(node: Node) -> Node:
    return MattohaSystem.GetLobbyNodeFor(node) as Node

## Extract Lobby ID from node path, all lobby games has "LobbyNN" when NN is the lobby ID.
## [br]
## [param node_path] node path to extract lobby id from.
func extract_lobby_id(node_path: String) -> int:
    return MattohaSystem.ExtractLobbyId(node_path)

## Start Server that clients will connect to.
func start_server():
    MattohaSystem.StartServer()

## Start Client that will connect to server.
func start_client():
    MattohaSystem.StartClient()

## Used to create an instance from scene, use this method to initialize instance if the instance
## will be spawned for all players or has MattohaSpawner node.
## [br][param scene_path] scene path to create instance from.
## [br][return] Created node instance with multiplayer authority that belongs to the owner of node who created it.
func create_instance(scene_path: String) -> Node:
    return MattohaSystem.CreateInstance(scene_path)

## Generate a spawning payload form a given node, this method is used under the hood to generate payloads
## for spawning nodes across players.
## [br][param node] node to generate payload from.
## [br][param additionalProps] additional properties to add to the payload.
## [br][return] Dictionary that has node data to spawn
func generate_node_payload_data(node: Node, additionalProps: Array[String]) -> Dictionary:
    return MattohaSystem.GenerateNodePayloadData(node, additionalProps)

## spawn a node by a payload generated by "generate_node_payload_data()", this method is used under the hood to spawn nodes.
func spawn_node_from_payload(payload: Dictionary):
    MattohaSystem.SpawnNodeFromPayload(payload)

## despawn a node by a payload generated by "generate_node_payload_data()", this method is used under the hood to despawn nodes.
func despawn_node_from_payload(payload: Dictionary):
    MattohaSystem.DespawnNodeFromPayload(payload)

## Send reliable server RPC to server, this will emmit "server_rpc_recieved" on server node.
## [br][param method_name] RPC method name.
## [br][param payload] payload as godot dictionaty.
func send_reliable_server_rpc(method_name: String, payload: Dictionary):
    MattohaSystem.SendReliableServerRpc(method_name, payload)

## Send reliable client RPC to peer, this will emmit "client_rpc_recieved" on client node.
## [br][param peer] peer id that will recive the event, 0 for all
## [br][param method_name] RPC method name.
## [br][param payload] payload as godot dictionaty.
func send_reliable_client_rpc(peer: int, method_name: String, payload: Dictionary):
    MattohaSystem.SendReliableClientRpc(peer, method_name, payload)

## Check if a given node is the owner of the node.
## [br][param node] node to check.
## [br][return] true if the current player is the owner.
func is_node_owner(node: Node):
    return MattohaSystem.IsNodeOwner(node)

## Check if (Current client) is the owner of the lobby.
## [br][return] true if the current player is the owner of joined lobby.
func get_lobby_owner() -> bool:
    return MattohaSystem.IsLobbyOwner()